# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker?view=azure-devops

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'nextjsdemo'
  imageTag: '$(build.buildId)'
  fullImageName: '$(imageName):$(imageTag)'
  containerRegistry: '4252pipe.azurecr.io'
  serviceConnection: '4252pipe'

steps:
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '10.x'

- script: |
    npm install
    npm run build
    npm test -- --ci --updateSnapshot --reports=default --reports=jest-junit
  displayName: 'npm install and build'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: 'artifacts/junit.xml'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'

- task: CopyFiles@2
  displayName: 'Copy files from: $(Build.SourcesDirectory)'
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    targetFolder: $(Build.ArtifactStagingDirectory)
    contents: |
      component\**
      deploy\**
      model\**
      pages\**
      static\**
      utils\**
      babel.config.js
      Dockerfile
      docker-compose.yml
      next.config.js
      package.json
      readme.md

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts

- task: Docker@1
  displayName: 'Containerize the application'
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    dockerFile: '**/Dockerfile'
    imageName: '$(fullImageName)'
    includeLatestTag: true

- task: Docker@1
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))
  displayName: Push image $(fullImageName)
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    command: 'Push an image'
    imageName: '$(fullImageName)'

- task: Docker@1
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))
  displayName: Push latest image
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    command: 'Push an image'
    imageName: '$(imageName):latest'

