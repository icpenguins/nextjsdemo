# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker?view=azure-devops

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'nextjsdemo'
  imageTag: '$(build.buildId)'
  azureContainerRegistry: 4252pipe
  azureSubscriptionEndpoint: 4252pipe

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run build
    npm test -- --ci --updateSnapshot --reports=default --reports=jest-junit
  displayName: 'npm install and build'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: 'artifacts/junit.xml'

- task: PublishCodeCoverageResults@1
  inputs: 
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'

- task: CopyFiles@2
  inputs:
    contents: |
      component\**\*.js
      component\**\*.css
      model\**\*.js
      pages\**\*.js
      pages\**\*.css
      utils\**\*.js
      babel.config.js
      Dockerfile
      next.config.js
      package.json
      readme.md
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1

- task: DockerCompose@0
  displayName: Container Registry Login
  inputs:
    containerregistrytype: Azure Container Registry
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)

- task: DockerCompose@0
  displayName: Build the Docker image
  inputs:
    action: Build services
    containerregistrytype: Azure Container Registry
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)
    additionalImageTags: $(Build.BuildId)
    dockerComposeFile: docker-compose.yml
    projectName: $(Build.Repository.Name)

- task: DockerCompose@0
  displayName: Push the Docker image
  inputs:
    action: Push services
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)
    dockerComposeFile: docker-compose.yml
    projectName: $(Build.Repository.Name)
    qualifyImageNames: true
    additionalImageTags: $(Build.BuildId)
