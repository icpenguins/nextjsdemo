# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker?view=azure-devops

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'nextjsdemo'
  imageTag: '$(build.buildId)'
  fullImageName: '$(imageName):$(imageTag)'
  containerRegistry: '4252pipe.azurecr.io'
  serviceConnection: '4252pipe'

jobs:
- job: build
  steps:
  - task: NodeTool@0
    displayName: 'Install Node.js'
    inputs:
      versionSpec: '10.x'

  - script: |
      npm install
      npm run build
      npm test -- --ci --updateSnapshot --reports=default --reports=jest-junit
    displayName: 'npm install and build'

- job: results
  dependsOn: build
  steps:
  - task: PublishTestResults@2
      condition: succeededOrFailed()
    inputs:
      testRunner: JUnit
      testResultsFiles: 'artifacts/junit.xml'

  - task: PublishCodeCoverageResults@1
    inputs: 
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'

  - task: CopyFiles@2
    displayName: Copy files
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      targetFolder: $(Build.ArtifactStagingDirectory)
      contents: |
        component\**\*
        model\**\*
        pages\**\*
        utils\**\*
        babel.config.js
        Dockerfile
        next.config.js
        package.json
        readme.md

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts

  - task: Docker@1
    displayName: 'Containerize the application'
    inputs:
      azureSubscriptionEndpoint: $(serviceConnection)
      azureContainerRegistry: $(containerRegistry)
      dockerFile: '**/Dockerfile'
      imageName: '$(fullImageName)'
      includeLatestTag: true

- job: push
  dependsOn: results
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))
  steps:
  - task: Docker@1
    displayName: Push image $(fullImageName)
    inputs:
      azureSubscriptionEndpoint: $(serviceConnection)
      azureContainerRegistry: $(containerRegistry)
      command: 'Push an image'
      imageName: '$(fullImageName)'

  - task: Docker@1
    displayName: Push latest image
    inputs:
      azureSubscriptionEndpoint: $(serviceConnection)
      azureContainerRegistry: $(containerRegistry)
      command: 'Push an image'
      imageName: '$(imageName):latest'
